// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"pixeltrace/biz/dal/model"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newAppCode(db *gorm.DB, opts ...gen.DOOption) appCode {
	_appCode := appCode{}

	_appCode.appCodeDo.UseDB(db, opts...)
	_appCode.appCodeDo.UseModel(&model.AppCode{})

	tableName := _appCode.appCodeDo.TableName()
	_appCode.ALL = field.NewAsterisk(tableName)
	_appCode.ID = field.NewInt64(tableName, "id")
	_appCode.Code = field.NewString(tableName, "code")
	_appCode.Description = field.NewString(tableName, "description")
	_appCode.TimeZone = field.NewString(tableName, "time_zone")
	_appCode.CreatedAt = field.NewTime(tableName, "created_at")
	_appCode.UpdatedAt = field.NewTime(tableName, "updated_at")
	_appCode.DeletedAt = field.NewField(tableName, "deleted_at")

	_appCode.fillFieldMap()

	return _appCode
}

type appCode struct {
	appCodeDo appCodeDo

	ALL         field.Asterisk
	ID          field.Int64
	Code        field.String
	Description field.String
	TimeZone    field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (a appCode) Table(newTableName string) *appCode {
	a.appCodeDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appCode) As(alias string) *appCode {
	a.appCodeDo.DO = *(a.appCodeDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appCode) updateTableName(table string) *appCode {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.Code = field.NewString(table, "code")
	a.Description = field.NewString(table, "description")
	a.TimeZone = field.NewString(table, "time_zone")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")

	a.fillFieldMap()

	return a
}

func (a *appCode) WithContext(ctx context.Context) IAppCodeDo { return a.appCodeDo.WithContext(ctx) }

func (a appCode) TableName() string { return a.appCodeDo.TableName() }

func (a appCode) Alias() string { return a.appCodeDo.Alias() }

func (a appCode) Columns(cols ...field.Expr) gen.Columns { return a.appCodeDo.Columns(cols...) }

func (a *appCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appCode) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 7)
	a.fieldMap["id"] = a.ID
	a.fieldMap["code"] = a.Code
	a.fieldMap["description"] = a.Description
	a.fieldMap["time_zone"] = a.TimeZone
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
}

func (a appCode) clone(db *gorm.DB) appCode {
	a.appCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appCode) replaceDB(db *gorm.DB) appCode {
	a.appCodeDo.ReplaceDB(db)
	return a
}

type appCodeDo struct{ gen.DO }

type IAppCodeDo interface {
	gen.SubQuery
	Debug() IAppCodeDo
	WithContext(ctx context.Context) IAppCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppCodeDo
	WriteDB() IAppCodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppCodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppCodeDo
	Not(conds ...gen.Condition) IAppCodeDo
	Or(conds ...gen.Condition) IAppCodeDo
	Select(conds ...field.Expr) IAppCodeDo
	Where(conds ...gen.Condition) IAppCodeDo
	Order(conds ...field.Expr) IAppCodeDo
	Distinct(cols ...field.Expr) IAppCodeDo
	Omit(cols ...field.Expr) IAppCodeDo
	Join(table schema.Tabler, on ...field.Expr) IAppCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppCodeDo
	Group(cols ...field.Expr) IAppCodeDo
	Having(conds ...gen.Condition) IAppCodeDo
	Limit(limit int) IAppCodeDo
	Offset(offset int) IAppCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppCodeDo
	Unscoped() IAppCodeDo
	Create(values ...*model.AppCode) error
	CreateInBatches(values []*model.AppCode, batchSize int) error
	Save(values ...*model.AppCode) error
	First() (*model.AppCode, error)
	Take() (*model.AppCode, error)
	Last() (*model.AppCode, error)
	Find() ([]*model.AppCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppCode, err error)
	FindInBatches(result *[]*model.AppCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppCodeDo
	Assign(attrs ...field.AssignExpr) IAppCodeDo
	Joins(fields ...field.RelationField) IAppCodeDo
	Preload(fields ...field.RelationField) IAppCodeDo
	FirstOrInit() (*model.AppCode, error)
	FirstOrCreate() (*model.AppCode, error)
	FindByPage(offset int, limit int) (result []*model.AppCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appCodeDo) Debug() IAppCodeDo {
	return a.withDO(a.DO.Debug())
}

func (a appCodeDo) WithContext(ctx context.Context) IAppCodeDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appCodeDo) ReadDB() IAppCodeDo {
	return a.Clauses(dbresolver.Read)
}

func (a appCodeDo) WriteDB() IAppCodeDo {
	return a.Clauses(dbresolver.Write)
}

func (a appCodeDo) Session(config *gorm.Session) IAppCodeDo {
	return a.withDO(a.DO.Session(config))
}

func (a appCodeDo) Clauses(conds ...clause.Expression) IAppCodeDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appCodeDo) Returning(value interface{}, columns ...string) IAppCodeDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appCodeDo) Not(conds ...gen.Condition) IAppCodeDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appCodeDo) Or(conds ...gen.Condition) IAppCodeDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appCodeDo) Select(conds ...field.Expr) IAppCodeDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appCodeDo) Where(conds ...gen.Condition) IAppCodeDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appCodeDo) Order(conds ...field.Expr) IAppCodeDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appCodeDo) Distinct(cols ...field.Expr) IAppCodeDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appCodeDo) Omit(cols ...field.Expr) IAppCodeDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appCodeDo) Join(table schema.Tabler, on ...field.Expr) IAppCodeDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppCodeDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppCodeDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appCodeDo) Group(cols ...field.Expr) IAppCodeDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appCodeDo) Having(conds ...gen.Condition) IAppCodeDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appCodeDo) Limit(limit int) IAppCodeDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appCodeDo) Offset(offset int) IAppCodeDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppCodeDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appCodeDo) Unscoped() IAppCodeDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appCodeDo) Create(values ...*model.AppCode) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appCodeDo) CreateInBatches(values []*model.AppCode, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appCodeDo) Save(values ...*model.AppCode) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appCodeDo) First() (*model.AppCode, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppCode), nil
	}
}

func (a appCodeDo) Take() (*model.AppCode, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppCode), nil
	}
}

func (a appCodeDo) Last() (*model.AppCode, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppCode), nil
	}
}

func (a appCodeDo) Find() ([]*model.AppCode, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppCode), err
}

func (a appCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppCode, err error) {
	buf := make([]*model.AppCode, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appCodeDo) FindInBatches(result *[]*model.AppCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appCodeDo) Attrs(attrs ...field.AssignExpr) IAppCodeDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appCodeDo) Assign(attrs ...field.AssignExpr) IAppCodeDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appCodeDo) Joins(fields ...field.RelationField) IAppCodeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appCodeDo) Preload(fields ...field.RelationField) IAppCodeDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appCodeDo) FirstOrInit() (*model.AppCode, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppCode), nil
	}
}

func (a appCodeDo) FirstOrCreate() (*model.AppCode, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppCode), nil
	}
}

func (a appCodeDo) FindByPage(offset int, limit int) (result []*model.AppCode, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appCodeDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appCodeDo) Delete(models ...*model.AppCode) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appCodeDo) withDO(do gen.Dao) *appCodeDo {
	a.DO = *do.(*gen.DO)
	return a
}
